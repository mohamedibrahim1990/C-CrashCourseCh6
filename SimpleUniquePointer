#include <cstddef>
#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>

template<typename T>
T square(T value){
    return value * value;
}


template<typename T>
struct SimpleUniquePointer{
    SimpleUniquePointer()=default;
    SimpleUniquePointer(T* pointer)
        :pointer{pointer}{
            
        }
    ~SimpleUniquePointer(){
        if(pointer) delete pointer;
    }

    SimpleUniquePointer(const SimpleUniquePointer&)=delete;
    SimpleUniquePointer& operator=(const SimpleUniquePointer&)=delete;
    SimpleUniquePointer(SimpleUniquePointer&& other) noexcept
        : pointer{other.pointer}{
            other.pointer=nullptr;
        }

    SimpleUniquePointer& operator=(SimpleUniquePointer&& other) noexcept{
        if(pointer) delete pointer;
        pointer=other.pointer;
        other.pointer =nullptr;
        return *this;
    }

    T* get(){
        return pointer;
    }
    private:
        T* pointer;
};

struct Tracer{
    Tracer(const char* name): name{name}{
        printf("%s constructed \n", name);
    }

    ~Tracer(){
        printf("%s destructed \n", this->name);
    }

private:
    const char* const name;
};

void consumer(SimpleUniquePointer<Tracer> consumer_ptr){
    printf("(cons) consumer_ptr: 0x%p\n", consumer_ptr.get());
}


template<typename T>
T mean(const T * values, size_t length){
    T result{};
    for(size_t i{}; i<length; i++){
        result +=values[i];
    }
    return result / length;
}

int main() { 
    const double nums_d[] {1.0, 2.0, 3.0, 4.0};
    const auto result1= mean(nums_d, 4);
    printf("double: %f\n", result1);

    const float nums_f[]{1.0f, 2.0f, 3.0f, 4.0f};
    const auto result2=mean(nums_f,4);
    printf("float: %f\n", result2);

    const size_t nums_c[]{1,2,3,4};
    const auto result3= mean(nums_c,4);
    printf("size_t: %zu\n", result3);

    std::vector<int> v1{1,2,3,4};
    std::sort(v1.begin(), v1.end());
    for(auto&e:v1){
        std::cout << e<<std::endl;
    }

    auto ptr_a =SimpleUniquePointer(new Tracer{"ptr_a"});
    printf("(main) ptr_a: 0x%p\n", ptr_a.get());
    consumer(std::move(ptr_a));
    printf("(main) ptr_a: 0x%p\n", ptr_a.get());

    char my_char{'Q'};
    auto result = square(&my_char);
    }
