//finsihed till page 7 of the chapter
#include <iostream>
#include <stdexcept>
template<typename To, typename From>
To narrow_cast(From value){
    const auto converted= static_cast<To>(value);
    const auto backwards=static_cast<From>(converted);
    if(value != backwards) throw std::runtime_error{"Narrowed"};
    return converted;
}
template<class T, class Y>
class Value{
public:
    Value(T Val): Val{Val}{}
private:
    T Val;
    Y B{};
};

class Type{
public:
    Type()=default;
};

template<typename X, typename Y, typename Z>
struct MyTemplateClass{
  X foo(Y&);
private:
    Z* member;
};

template<typename X>
X my_template_function(X v, X v2){
    return v +v2;
}

void carbon_thaw(const int & encased_solo){
        //encased_solo++  //compiler error // modifying const
        auto& hibernation_sick_solo =const_cast<int&>(encased_solo);
        hibernation_sick_solo++;
        std::cout << hibernation_sick_solo << std::endl;
}

short increment_as_short(void* target){
    auto as_short=static_cast<short*>(target);
    *as_short = *as_short +1;
    return *as_short;
}

int main(){
   
    short beast{665};
    auto mark_of_the_beast = increment_as_short(&beast);
    printf("%d is teh mark_of_the_beast. ", mark_of_the_beast);
    Value<int, float> v{7};
    Type T1;
    Value<Type, float> v2{T1};
  
    auto x=my_template_function<int>(5, 15);
    std::cout << "x is " << x << std::endl;
    std::cout << "Hello world" << std::endl;

    x= static_cast<int>(5.5);
    std::cout <<  x <<  std::endl;

    int& y=x;
    carbon_thaw(y);

    int perfect{496};
    const auto perfect_short = narrow_cast<short>(perfect);
    printf("perfect_short: %d\n", perfect_short);
    try{
        int cyclic{ 142857 };
        const auto cyclic_short = narrow_cast<short>(cyclic);
        printf("cyclic_short: %d\n", cyclic_short);
    }catch (const std::runtime_error& e){
        printf("Exception: %s\n", e.what());
    }
}
